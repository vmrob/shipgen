part probability distributions:
  mandatory (1, possibly backup) #cockpit, etc.
  redundant (at least 2, possibly more) #warship bridge
  primary (several) #ship's primary purpose: warship weapons, cargo ship cargo bays, etc.
  secondary (probably some) #related to ship's primary purpose: warship medbays, cargo ship refineries, etc.
  tertiary (possibly one or more) #mostly unrelated to ship's primary purpose: cargo ship weapons, etc.
  rare (possibly 1) #completely unrelated to ship's primary purpose: warship refineries, gravity generators, etc.
  none (0)

part:
  name
  type (small ship/large ship/station)
  mass
  power consumption (negative for reactors)
  thrust
  turn
  size
  attachment points (all if unspecified)
  cargo doors
  access requirements (num_required x1 y1 z1 x2 y2 z2 ...)
  room affinities (including entry for "exterior")

room:
  name
  wall/floor material affinities (interior wall, light armor, heavy armor)
  enclosure affinities (none, floor, full, sealed)
  door probability
  window probability
  part min/max requirements

power levels:
  minimum: largest of
    150% aft-facing thrusters
	all gyros
	largest single part
  standard: largest of
    150% aft-facing and single lateral-facing thrusters
	150% aft-facing thrusters + all gyros
	all parts
  high: largest of
    150% aft-facing and two lateral-facing thrusters
	150% aft-facing and single lateral-facing thrusters + all gyros
	100% aft-facing thrusters + all gyros + all parts
  maximum:
    150% aft-facing and two lateral-facing thrusters + all gyros + all parts

ship class:
  name
  type (small ship/large ship/station)
  material affinities (interior wall, light armor, heavy armor)
  enclosure affinities (none, platform, full)
  symmetry affinities (none, partial, full)
  speed/maneuverability min/max requirements
  speed min factors (fwd = min..1 * aft; lateral = min..fwd_factor * aft)
  power level affinities
  part probabilities, min/max requirements
  room probabilities, min/max requirements


generate ship:
  select type
  select class
  select hull material
  select parts
  select rooms
  assign parts to rooms (strip out empty rooms)
  loop until no more gyros/engines/reactors necessary:
    preliminary layout
    estimate total mass
    add gyros and engines
    estimate power consumption
    add reactors
    assign gyros and reactors to rooms
  finalize layout


choose reactors:
  reactors = list of parts with negative power consumption
  sort reactors by power output / mass
  loop until no more reactors:
    next priority reactor = reactors[0]
	remove reactors with mass >= reactors[0].mass (maybe reactors[0].mass * 0.5 or some similar factor)
